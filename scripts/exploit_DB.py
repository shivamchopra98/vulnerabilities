import requests
import os
import shutil
from datetime import datetime

def cleanup_old_files(folder, keep_today):
    """
    Delete all CSV files in the folder except today's.
    """
    for fname in os.listdir(folder):
        fpath = os.path.join(folder, fname)
        if os.path.isfile(fpath) and fname != f"{keep_today}.csv":
            print(f"üóëÔ∏è Removing old file ‚Üí {fpath}")
            os.remove(fpath)

def download_csv(file_name):
    """
    Download a CSV file from ExploitDB GitLab repo and save it
    in 'exploit_database' folder under vulnerabilities with today's date as filename.
    Keeps only the latest file (deletes older ones).
    """
    # Base GitLab raw file URL
    base_url = "https://gitlab.com/exploit-database/exploitdb/-/raw/main/"
    url = base_url + file_name

    # Define the base folder under vulnerabilities
    base_folder = r"C:\Users\ShivamChopra\Projects\vulnerabilities"
    folder = os.path.join(base_folder, "exploit_database")
    os.makedirs(folder, exist_ok=True)

    # File will be saved as YYYY-MM-DD.csv
    today = datetime.now().strftime("%Y-%m-%d")
    save_path = os.path.join(folder, f"{today}.csv")

    # Cleanup old files before saving
    cleanup_old_files(folder, today)

    # Download the file
    response = requests.get(url)
    if response.status_code == 200:
        with open(save_path, "wb") as f:
            f.write(response.content)
        print(f"‚úÖ Downloaded {file_name} as {save_path}")
    else:
        print(f"‚ùå Failed to download {file_name}. Status code: {response.status_code}")

if __name__ == "__main__":
    # Example: download the main exploits CSV
    download_csv("files_exploits.csv")
